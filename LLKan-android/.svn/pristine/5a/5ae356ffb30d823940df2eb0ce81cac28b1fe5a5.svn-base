package com.mrljdx.llk;



import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import android.R;
import android.graphics.Paint;
import android.graphics.Point;
import android.util.Log;

import com.badlogic.gdx.Game;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;

public class GameScreen implements Screen, InputProcessor {
	// 定义游戏中的各种状态，准备0，游戏运行1，游戏暂停2，通关3，游戏over 4
	static final int GAME_READY = 0;
	static final int GAME_RUNNING = 1;
	static final int GAME_PAUSED = 2;
	static final int GAME_LEVEL_END = 3;
	static final int GAME_OVER = 4;

	Game game;
	int state;
	int startflag=0;
//	int selectflag=0;
	boolean win=false;
	int lastscore;
	int picflag = 0;
	int posx,posy;
	int killcount=0;
	int[] pos1 = new int[2];
	int[] pos2 =new int[2];
	private List<int[]> path = new ArrayList<int[]>();
	//定义一个9行8列的矩阵，用于存放值
//	TextureRegion[][] map = new TextureRegion[9][8];
	String str=" ";
	OrthographicCamera guiCam;
	Vector3 touchPoint;
	SpriteBatch batcher;
	BitmapFont bf;
	TextureRegion[][] pic;
	// Bounds
	Rectangle pauseBounds;
	Rectangle resumeBounds;
	Rectangle quitBounds;
	Rectangle tool1Bounds;
	Rectangle tool2Bounds;
	Rectangle tool3Bounds;
	Rectangle tool4Bounds;
	private int timeint=100;
	private int level=1;
	public GameScreen(Game game) {
		this.game = game;
		Gdx.input.setInputProcessor(this);
		Assets.font.setColor(0,1,0,1);
		guiCam = new OrthographicCamera(480, 800);
		guiCam.position.set(480 / 2, 800 / 2, 0);
		touchPoint = new Vector3();
		batcher = new SpriteBatch();
		pic = new TextureRegion[8][9];
		pauseBounds = new Rectangle(400, 720, 50, 50);
		resumeBounds = new Rectangle(160, 460, 170, 50);
		quitBounds = new Rectangle(160, 400, 170, 50);
		tool1Bounds = new Rectangle(250,800-660,90,90);
		tool2Bounds = new Rectangle(350,800-600,90,90);
		tool3Bounds = new Rectangle(250,800-760,90,90);
		tool4Bounds = new Rectangle(350,800-760,90,90);
		pic=initMap();
	}
	
	public TextureRegion[][] initMap(){
		int n=1; //记录图片ID
		int m=0; //标记
		for(int i=0;i<8;i++){
			for(int j=0;j<9;j++){
				pic[i][j] = Assets.pt[n];
				if(m==1){
					n++;
					m=0;
					if(n==13){ //13张图片一个循环
						n=1;
					}
				}else{
					m=1;
				}
			}
		}		
		//乱序排列图片
		Random random = new Random();
		int tmpX,tmpY;
		TextureRegion tg;
		for (int x = 0; x <8; x++) {
			for (int y = 0; y < 9; y++) {
				tmpX = 1 + random.nextInt(9 - 2);
				tmpY = 1 + random.nextInt(10 - 2);
				tg = pic[x][y];
				pic[x][y] = pic[tmpX][tmpY];
				pic[tmpX][tmpY] = tg;
			}
		}
		return pic;
	}
	public void drawmap(TextureRegion[][] pic){//画图
		for(int i=0;i<8;i++){
			for(int j=0;j<9;j++){
				batcher.draw(pic[i][j], 56 + i * 45, 295 + j * 45, Assets.picwidth, Assets.picheight);
			}
		}		
	}
	
	List<int[]> p1E = new ArrayList<int[]>();
	List<int[]> p2E = new ArrayList<int[]>();

	
	private boolean link(int[] p1, int[] p2) {
		if (p1[0]==p2[0]&&p1[1]==p2[1]) {
			Gdx.app.log("LLK", "点的是同一张图片");
			return false;
		}
		if (pic[p1[0]][p1[1]] == pic[p2[0]][p2[1]]) {
			if (linkD(p1, p2)) {//相邻的一样的图片消去，
				Gdx.app.log("LLK", "这两张图片相邻，且一样，可以消去！");
				return true;
			}
			int[] p = new int[2];
			p[0] = p1[0]; // p1的横坐标
			p[1] = p2[1]; // p2的纵坐标
			if (pic[p[0]][p[1]] == Assets.pt[0]) {  //有一个转折点
				if (linkD(p1, p) && linkD(p, p2)) {
					Gdx.app.log("LLK","===图片在水平方向之间有一个转折点，可以消去===");
					return true;
				}
			}
			p[0]=p2[0];
			p[1]=p1[1];
			if (pic[p[0]][p[1]] == Assets.pt[0]) {  //有一个转折点 同上 （第二种情况）
				if (linkD(p1, p) && linkD(p, p2)) {
//					path.add(p1);
//					path.add(p);
//					path.add(p2);
					Gdx.app.log("LLK","===图片在竖直方向之间有一个转折点，可以消去===");
					return true;
				}
			}
			
			Gdx.app.log("LLK", "---->p1-X<-----");
			p1E.clear();
			p2E.clear();
			expandX(p1,p1E);
			Gdx.app.log("LLK", "---->p2-X<-----");
			expandX(p2,p2E);
			//判断3个转折点的情况1
			for (int[] pt1 : p1E) {
				for (int[] pt2 : p2E) {
					if (pt1[0] == pt2[0]) {
						Gdx.app.log("LLK","===三个转折点的情况1===");
						if (linkD(pt1, pt2)) {							
//							path.add(p1);
//							path.add(pt1);
//							path.add(pt2);
//							path.add(p2);
							return true;
						}
					}
					Gdx.app.log("LLK","===三个转折点的情况1 判断失败===");
				}
			}
			Gdx.app.log("LLK", "---->p1-Y<-----");
			expandY(p1,p1E);
			Gdx.app.log("LLK", "---->p2-Y<-----");
			expandY(p2,p2E);
			//判断3个转折点的情况2
			for (int[] pt1 : p1E) {
				for (int[] pt2 : p2E) {	
//					Gdx.app.log("LLK", "存在p1E中的值是"+pt1);
					if (pt1[1] == pt2[1]) {
						Gdx.app.log("LLK","===三个转折点的情况2===");
						if (linkD(pt1, pt2)) {							
//							path.add(p1);
//							path.add(pt1);
//							path.add(pt2);
//							path.add(p2);
							return true;
						}
					}
					Gdx.app.log("LLK","===三个转折点的情况2 判断失败===");
				}
			}
			return false;
		}
		
		return false;
	}
	private boolean linkD(int[] p1, int[] p2) {
		if(p1[0]==0&&p2[0]==0||p1[0]==7&&p2[0]==7)
			return true;
		if(p1[1]==0&&p2[1]==0||p1[1]==8&&p2[1]==8)
			return true;
		if (p1[0] == p2[0]) {  //如果两张图片在同一行上
			Gdx.app.log("LLK", "进入到LinkD函数");
			int y1 = Math.min(p1[1], p2[1]);//y1为p1[1]和p2[1]比较的最小值
			int y2 = Math.max(p1[1], p2[1]);//y2为p1[1]和p2[1]比较的最大值
			boolean flag = true;
			for (int y = y1 + 1; y < y2; y++) { //判断这一行上有没有阻碍
				if (pic[p1[0]][y] != Assets.pt[0]) {
					Gdx.app.log("LLK", "由于两张在同一列的图片之间有其他图片所以不能直接连接！");
					flag = false;
					break;
				}
			}
			if (flag) {
				return true; 
			}
		}
		if (p1[1] == p2[1]) { //如果 两张图片在同一列上
			int x1 = Math.min(p1[0], p2[0]);
			int x2 = Math.max(p1[0], p2[0]);
			boolean flag = true;
			for (int x = x1 + 1; x < x2; x++) { //判断这一列上，两张图片之间有没阻碍
				if (pic[x][p1[1]] != Assets.pt[0]) {
					Gdx.app.log("LLK", "由于两站在同一行的图片之间有其他图片所以不能直接连接！");
					flag = false;
					break;
				}
			}
			if (flag) {
				return true;
			}
		}
		return false;
	}

	private void expandX(int[] p,List<int[]> l) {
		for (int x = p[0] + 1; x < 8; x++) {
			if (pic[x][p[1]] != Assets.pt[0]) {
				Gdx.app.log("LLK", "本图片同列，向右遍历，存在图片");
				break;
			}
			int[] m=new int[2];
			m[0]=x;
			m[1]=p[1];
			Gdx.app.log("LLK", "m的值："+m[0]+" "+m[1]);
			l.add(m);
			
			Gdx.app.log("LLK", "expandX函数的值X+"+x);
		}
		for (int x = p[0] - 1; x > 0; x--) {
			if (pic[x][p[1]] != Assets.pt[0]) {
				Gdx.app.log("LLK", "本图片同列，向左遍历，存在图片");
				break;
			}
			int[] m=new int[2];
			m[0]=x;
			m[1]=p[1];
			Gdx.app.log("LLK", "m的值："+m[0]+" "+m[1]);
			l.add(m);
		}
	}

	private void expandY(int[] p,List<int[]> l) {
		
		for (int y = p[1] + 1; y < 9; y++) {
			if (pic[p[0]][y] != Assets.pt[0]) {
				Gdx.app.log("LLK", "本图片同行，向上遍历，存在图片");
				break;
			}
			int[] m=new int[2];
			m[0]=p[0];
			m[1]=y;
			Gdx.app.log("LLK", "m的值："+m[0]+" "+m[1]);
			l.add(m);
		}
		for (int y = p[1] - 1; y > 0; y--) {
			if (pic[p[0]][y] != Assets.pt[0]) {
				Gdx.app.log("LLK", "本图片同行，向下遍历，存在图片");
				break;
			}
			int[] m=new int[2];
			m[0]=p[0];
			m[1]=y;
			Gdx.app.log("LLK", "m的值："+m[0]+" "+m[1]);
			l.add(m);
		}
	}

	private boolean win() {
		for (int x = 0; x < 8; x++) {
			for (int y = 0; y < 9; y++) {
				if (pic[x][y] != Assets.pt[0]) {
					return false;
				}
			}
		}
		return true;
	}

	private void draw(float deltaTime) {
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		Gdx.gl.glClearColor(0f, 0f, 0f, 0f);
		guiCam.update();
		batcher.setProjectionMatrix(guiCam.combined);
		batcher.disableBlending();
		batcher.begin();
			batcher.draw(Assets.gamebg, 0, 0, 480, 800);
		batcher.end();
		batcher.enableBlending();
		batcher.begin();
		switch (state) {
		case GAME_READY:
			presentReady();
			break;
		case GAME_RUNNING:
			presentRunning(deltaTime);
			break;
		case GAME_PAUSED:
			presentPaused();
			break;
		case GAME_LEVEL_END:
			presentLevelEnd();
			break;
		case GAME_OVER:
			presentGameOver();
			break;
		}
		batcher.end();
	}

	private void presentReady() {
		// TODO Auto-generated method stub
		// 玩家1界面图片资源布局
		drawmap(pic);
		batcher.draw(Assets.bgblack, 0, 0, 480, 800);
		Assets.font.draw(batcher, "READY??", 200, 450);
		
	}

	private void presentRunning(float deltaTime) {
		// TODO Auto-generated method stub
//		batcher.begin();
		drawmap(pic);
//		batcher.end();	
		if (deltaTime > 0.1f)
			deltaTime = 0.1f;
//		timeint-=deltaTime;
		Assets.font.draw(batcher, str+timeint, 280, 752);
		Assets.font.draw(batcher, str+level, 130, 752);
	}

	private void presentPaused() {
		// TODO Auto-generated method stub
		drawmap(pic);
		batcher.draw(Assets.bgblack, 0, 0, 480, 800);
		batcher.draw(Assets.pausebg, 40, 350);
		batcher.draw(Assets.continuebt, 160, 460);
		batcher.draw(Assets.returnbt, 160, 400);
	}

	private void presentLevelEnd() {
		// TODO Auto-generated method stub
		batcher.draw(Assets.bgblack, 0, 0, 480, 800);
		Assets.font.draw(batcher, "Touch　to Next Level!!", 100, 450);
	}

	private void presentGameOver() {
		// TODO Auto-generated method stub
		batcher.draw(Assets.bgblack, 0, 0, 480, 800);
		Assets.font.draw(batcher, "GAME OVER!!", 150, 450);
	}

	public void update(float deltaTime) {
		if (deltaTime > 0.1f)
			deltaTime = 0.1f;
		switch (state) {
		case GAME_READY:
			updateReady();
			break;
		case GAME_RUNNING:
			updateRunning(deltaTime);
			break;
		case GAME_PAUSED:
			updatePaused();
			break;
		case GAME_LEVEL_END:
			updateLevelEnd();
			break;
		case GAME_OVER:
			updateGameOver();
			break;
		}

	}

	private void updateReady() {
		// TODO Auto-generated method stub
		if (Gdx.input.justTouched()) {
			state = GAME_RUNNING;
		}
	}
	
	private void crakepic(){
		
	}
	private void refresh(){
		TextureRegion tg;
		Random random = new Random();
		int tmpX,tmpY;
		for (int x = 0; x <8; x++) {
			for (int y = 0; y < 9; y++) {
				tmpX = 1 + random.nextInt(9 - 2);
				tmpY = 1 + random.nextInt(10 - 2);
				tg = pic[x][y];
				pic[x][y] = pic[tmpX][tmpY];
				pic[tmpX][tmpY] = tg;
			}
		}
	}
	private void autoLink(){
		
	}

	private void updateRunning(float deltaTime) {
		// TODO Auto-generated method stub	
		if (Gdx.input.justTouched()) {
			startflag=1;
			guiCam.unproject(touchPoint.set(Gdx.input.getX(), Gdx.input.getY(),0));
			if (OverlapTester.pointInRectangle(pauseBounds, touchPoint.x,touchPoint.y)) {
				Assets.playtouchsound(Assets.button);
				state = GAME_PAUSED;
				return;
			}
			if(OverlapTester.pointInRectangle(tool1Bounds, touchPoint.x,touchPoint.y)){
				Assets.playtouchsound(Assets.tools3);
				return;
			}
			if(OverlapTester.pointInRectangle(tool2Bounds, touchPoint.x,touchPoint.y)){
				Assets.playtouchsound(Assets.tools2);
				return;
			}
			if(OverlapTester.pointInRectangle(tool3Bounds, touchPoint.x,touchPoint.y)){
				Assets.playtouchsound(Assets.tools1);
				refresh();
				return;
			}
			if(OverlapTester.pointInRectangle(tool4Bounds, touchPoint.x,touchPoint.y)){
				Assets.playtouchsound(Assets.tools4);
				return;
			}
			if((touchPoint.x>=48||touchPoint.x<=420)&&(touchPoint.y>=(800-510)||touchPoint.y<=(800-90))){		
				posx=(int) ((touchPoint.x-56)/45);
				posy=(int) ((touchPoint.y-295)/45);
				if(picflag==1){
					if(posx>=0&&posx<=7)
						pos2[0]=posx;
					if(posy>=0&&posy<=8)
						pos2[1]=posy;
					picflag=0;
					if(link(pos1,pos2)){
						Gdx.app.log("LLK", "====两个点之间可以连接，返回true====");
						killcount++;
						if(killcount==1)
							Assets.playtouchsound(Assets.firstblood);
						if(killcount>1){
							switch(killcount){
								case 2:Assets.playtouchsound(Assets.doublekill);break;
								case 3:Assets.playtouchsound(Assets.dominating);break;
								case 4:Assets.playtouchsound(Assets.unstoppable);break;
								case 5:Assets.playtouchsound(Assets.megakill);break;
								case 6:Assets.playtouchsound(Assets.killingspree);break;
								case 7:Assets.playtouchsound(Assets.godlike);break;
								default:Assets.playtouchsound(Assets.holyshit);
								
							}
								
						}						
						pic[pos1[0]][pos1[1]]=Assets.pt[0];
						pic[pos2[0]][pos2[1]]=Assets.pt[0];
					};
				}
				if(pic[pos1[0]][pos1[1]]!=Assets.pt[0]&&(pos1[0]>=0&&pos1[0]<=7&&pos1[1]>=0&&pos1[1]<=8)){
					Assets.playtouchsound(Assets.click);
				}
			}		
			
		}
		if(startflag==1&&(posx>=0&&posx<=7&&posy>=0&&posy<=8)&&pic[posx][posy]!=Assets.pt[0]){	
			if(picflag==0){
				if(posx>=0&&posx<=7)
					pos1[0]=posx;
				if(posy>=0&&posy<=8)
					pos1[1]=posy;
			}
			picflag=1;
			batcher.begin();
				batcher.draw(Assets.selector,54 +pos1[0] * Assets.picwidth, 293 + pos1[1] * Assets.picheight, 50,50);
			batcher.end();
		}			
		if(timeint==0){
			state=GAME_OVER;
		}else{
			if(win()){
				state=GAME_LEVEL_END;
			}
		}

	}
	
	private void updatePaused() {
		// TODO Auto-generated method stub
		if (Gdx.input.justTouched()) {
			guiCam.unproject(touchPoint.set(Gdx.input.getX(), Gdx.input.getY(),
					0));
			if (OverlapTester.pointInRectangle(resumeBounds, touchPoint.x,
					touchPoint.y)) {
				Assets.playtouchsound(Assets.button);
				state = GAME_RUNNING;
				return;
			}
			if (OverlapTester.pointInRectangle(quitBounds, touchPoint.x,
					touchPoint.y)) {
				Assets.playtouchsound(Assets.button);
				game.setScreen(new MainMenuScreen(game));
				return;
			}
		}

	}

	private void updateLevelEnd() {
		// TODO Auto-generated method stub
		if (Gdx.input.justTouched()) {
			Gdx.app.log("LLK", "Enter next level!");
			state = GAME_READY;
			pic=initMap();
//			game.setScreen(new GameScreen(game));
			level++;
			timeint-=10;	
		}
	}

	private void updateGameOver() {
		// TODO Auto-generated method stub
		if (Gdx.input.justTouched()) {
			game.setScreen(new MainMenuScreen(game));
		}
	}

	@Override
	public boolean keyDown(int arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyTyped(char arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyUp(int arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean mouseMoved(int arg0, int arg1) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean scrolled(int arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDown(int arg0, int arg1, int arg2, int arg3) {
		// TODO Auto-generated method stub
//		Assets.playsound(Assets.click);
		return false;
	}

	@Override
	public boolean touchDragged(int arg0, int arg1, int arg2) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchUp(int arg0, int arg1, int arg2, int arg3) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void dispose() {
		// TODO Auto-generated method stub

	}

	@Override
	public void hide() {
		// TODO Auto-generated method stub

	}

	@Override
	public void pause() {
		// TODO Auto-generated method stub
		if (state == GAME_RUNNING)
			state = GAME_PAUSED;
	}

	@Override
	public void render(float deltaTime) {
		// TODO Auto-generated method stub
		draw(deltaTime);
		update(deltaTime);
	}

	@Override
	public void resize(int arg0, int arg1) {
		// TODO Auto-generated method stub

	}

	@Override
	public void resume() {
		// TODO Auto-generated method stub

	}

	@Override
	public void show() {
		// TODO Auto-generated method stub

	}

}
